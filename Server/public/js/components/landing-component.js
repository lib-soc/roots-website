
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteElement, i as init, a as attribute_to_object, b as insert_dev, s as safe_not_equal, d as dispatch_dev, v as validate_slots, o as onMount, k as element, l as space, n as noop, p as attr_dev, m as add_location, u as append_dev, y as listen_dev, h as detach_dev, z as run_all, C as binding_callbacks } from './index-b7675d8f.js';
import { loadLocaleContent } from '../../../../../../../../../js/libraries/serverTools.js';
import { w as writable } from './index-674dbc31.js';

/* src\landing-component.svelte generated by Svelte v3.52.0 */
const file = "src\\landing-component.svelte";

function create_fragment(ctx) {
	let div2;
	let picture;
	let source0;
	let t0;
	let source1;
	let t1;
	let img;
	let t2;
	let div1;
	let h1;
	let t4;
	let p;
	let t6;
	let div0;
	let button0;
	let t8;
	let button1;
	let t10;
	let button2;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div2 = element("div");
			picture = element("picture");
			source0 = element("source");
			t0 = space();
			source1 = element("source");
			t1 = space();
			img = element("img");
			t2 = space();
			div1 = element("div");
			h1 = element("h1");
			h1.textContent = "The Roots Party";
			t4 = space();
			p = element("p");
			p.textContent = "We are a left libertarian organization based in Ireland. We have a focus on rebuilding the country's infrastructure, sense of governance, housing, agricultural industries and youth affairs.";
			t6 = space();
			div0 = element("div");
			button0 = element("button");
			button0.textContent = "Manifesto";
			t8 = space();
			button1 = element("button");
			button1.textContent = "Join Us";
			t10 = space();
			button2 = element("button");
			button2.textContent = "Partners";
			this.c = noop;
			attr_dev(source0, "srcset", "/img/common/logo.webp");
			add_location(source0, file, 26, 8, 611);
			attr_dev(source1, "srcset", "/img/common/logo.png");
			add_location(source1, file, 27, 8, 660);
			attr_dev(img, "id", "logo");
			attr_dev(img, "alt", "logo");
			add_location(img, file, 28, 8, 708);
			add_location(picture, file, 25, 4, 592);
			add_location(h1, file, 32, 8, 797);
			add_location(p, file, 33, 8, 831);
			add_location(button0, file, 35, 12, 1091);
			add_location(button1, file, 36, 12, 1187);
			add_location(button2, file, 37, 12, 1279);
			attr_dev(div0, "id", "buttons-grid");
			add_location(div0, file, 34, 8, 1037);
			attr_dev(div1, "id", "text-container");
			add_location(div1, file, 31, 4, 762);
			attr_dev(div2, "id", "container");
			add_location(div2, file, 24, 0, 566);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, picture);
			append_dev(picture, source0);
			append_dev(picture, t0);
			append_dev(picture, source1);
			append_dev(picture, t1);
			append_dev(picture, img);
			append_dev(div2, t2);
			append_dev(div2, div1);
			append_dev(div1, h1);
			append_dev(div1, t4);
			append_dev(div1, p);
			append_dev(div1, t6);
			append_dev(div1, div0);
			append_dev(div0, button0);
			append_dev(div0, t8);
			append_dev(div0, button1);
			append_dev(div0, t10);
			append_dev(div0, button2);
			/*div0_binding*/ ctx[5](div0);

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*click_handler*/ ctx[2], false, false, false),
					listen_dev(button1, "click", /*click_handler_1*/ ctx[3], false, false, false),
					listen_dev(button2, "click", /*click_handler_2*/ ctx[4], false, false, false)
				];

				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			/*div0_binding*/ ctx[5](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('landing-component', slots, []);
	let grid;

	//let loaded = writable(0)
	//let content = writable({})
	//loadLocaleContent(content,"countries",loaded)
	//let locale = loadLocaleContent(content,"landing-component",loaded)
	let locale = "en";

	onMount(() => {
		
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<landing-component> was created with unknown prop '${key}'`);
	});

	const click_handler = () => location.href = "/" + locale + "/manifesto/";
	const click_handler_1 = () => location.href = "/" + locale + "/join-us/";
	const click_handler_2 = () => location.href = "/" + locale + "/partners/";

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			grid = $$value;
			$$invalidate(0, grid);
		});
	}

	$$self.$capture_state = () => ({
		onMount,
		loadLocaleContent,
		writable,
		grid,
		locale
	});

	$$self.$inject_state = $$props => {
		if ('grid' in $$props) $$invalidate(0, grid = $$props.grid);
		if ('locale' in $$props) $$invalidate(1, locale = $$props.locale);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [grid, locale, click_handler, click_handler_1, click_handler_2, div0_binding];
}

class Landing_component extends SvelteElement {
	constructor(options) {
		super();
		this.shadowRoot.innerHTML = `<style>@import '/css/common.css';h1{font-size:3rem;text-align:center;margin-bottom:2rem}#text-container{max-width:calc(100vw - 4rem);margin:auto}#logo{display:block;height:15rem;margin:auto;margin-bottom:2rem;border-radius:3rem}#container{position:relative;margin:auto;max-width:800px;margin-top:2rem;margin-bottom:5rem}#container>div>p{margin-bottom:1rem}#container p{text-align:justify}#buttons-grid{display:grid;grid-template-columns:1fr 1fr max-content;grid-gap:4rem;margin:auto;margin-top:2rem}#buttons-grid>button{position:relative;width:13rem;height:5rem;border-radius:0.2rem;background-color:#D87819;font-size:1.6rem;font-style:var(--sans-serif,sans-serif);color:black}@media only screen and (max-width: 1060px){#buttons-grid{display:grid;grid-template-columns:1fr;grid-gap:2rem}}</style>`;

		init(
			this,
			{
				target: this.shadowRoot,
				props: attribute_to_object(this.attributes),
				customElement: true
			},
			instance,
			create_fragment,
			safe_not_equal,
			{},
			null
		);

		if (options) {
			if (options.target) {
				insert_dev(options.target, this, options.anchor);
			}
		}
	}
}

customElements.define("landing-component", Landing_component);

export { Landing_component as default };
