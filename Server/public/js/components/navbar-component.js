
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteElement, i as init, a as attribute_to_object, b as insert_dev, s as safe_not_equal, d as dispatch_dev, v as validate_slots, c as validate_store, e as component_subscribe, o as onMount, E as getContext, g as globals, f as empty, n as noop, h as detach_dev, C as binding_callbacks, k as element, l as space, t as text, p as attr_dev, m as add_location, u as append_dev, y as listen_dev, w as set_data_dev } from './index-b7675d8f.js';
import { w as writable } from './index-674dbc31.js';
import { loadLocaleContent, locales } from '../../../../../../../../../js/libraries/serverTools.js';

/* src\navbar\navbar-component.svelte generated by Svelte v3.52.0 */

const { Object: Object_1 } = globals;
const file = "src\\navbar\\navbar-component.svelte";

// (61:4) {#if Object.keys($content).length!=0}
function create_if_block(ctx) {
	let header;
	let input;
	let t0;
	let label;
	let span0;
	let t1;
	let a0;
	let picture;
	let source0;
	let t2;
	let source1;
	let t3;
	let img;
	let t4;
	let span1;
	let t5_value = /*$content*/ ctx[2].orgName + "";
	let t5;
	let t6;
	let nav;
	let ul;
	let li0;
	let a1;
	let t7_value = /*$content*/ ctx[2].manifesto + "";
	let t7;
	let t8;
	let li1;
	let a2;
	let t9_value = /*$content*/ ctx[2].joinUs + "";
	let t9;
	let t10;
	let li2;
	let a3;
	let t11_value = /*$content*/ ctx[2].partners + "";
	let t11;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			header = element("header");
			input = element("input");
			t0 = space();
			label = element("label");
			span0 = element("span");
			t1 = space();
			a0 = element("a");
			picture = element("picture");
			source0 = element("source");
			t2 = space();
			source1 = element("source");
			t3 = space();
			img = element("img");
			t4 = space();
			span1 = element("span");
			t5 = text(t5_value);
			t6 = space();
			nav = element("nav");
			ul = element("ul");
			li0 = element("li");
			a1 = element("a");
			t7 = text(t7_value);
			t8 = space();
			li1 = element("li");
			a2 = element("a");
			t9 = text(t9_value);
			t10 = space();
			li2 = element("li");
			a3 = element("a");
			t11 = text(t11_value);
			attr_dev(input, "type", "checkbox");
			attr_dev(input, "id", "side-menu");
			add_location(input, file, 63, 12, 1799);
			attr_dev(span0, "id", "hamb-line");
			add_location(span0, file, 64, 45, 1930);
			attr_dev(label, "id", "hamb");
			attr_dev(label, "for", "side-menu");
			add_location(label, file, 64, 12, 1897);
			attr_dev(source0, "srcset", "/img/common/logo.webp");
			add_location(source0, file, 68, 20, 2103);
			attr_dev(source1, "srcset", "/img/parties/logo.jpg");
			add_location(source1, file, 69, 20, 2166);
			attr_dev(img, "id", "navbar-logo");
			attr_dev(img, "alt", "logo");
			add_location(img, file, 70, 20, 2229);
			add_location(picture, file, 67, 16, 2072);
			attr_dev(span1, "id", "navbar-logo-text");
			add_location(span1, file, 72, 16, 2308);
			attr_dev(a0, "id", "logo-container");
			attr_dev(a0, "href", "/" + /*locale*/ ctx[5] + "/");
			add_location(a0, file, 66, 12, 2007);
			attr_dev(a1, "href", "/" + /*locale*/ ctx[5] + "/manifesto");
			add_location(a1, file, 77, 24, 2492);
			add_location(li0, file, 77, 20, 2488);
			attr_dev(a2, "href", "/" + /*locale*/ ctx[5] + "/join-us");
			add_location(a2, file, 78, 24, 2581);
			add_location(li1, file, 78, 20, 2577);
			attr_dev(a3, "href", "/" + /*locale*/ ctx[5] + "/partners");
			add_location(a3, file, 83, 24, 3022);
			add_location(li2, file, 83, 20, 3018);
			attr_dev(ul, "id", "menu");
			add_location(ul, file, 76, 16, 2452);
			attr_dev(nav, "id", "nav");
			add_location(nav, file, 75, 12, 2420);
			attr_dev(header, "id", "navbar");
			add_location(header, file, 61, 8, 1709);
		},
		m: function mount(target, anchor) {
			insert_dev(target, header, anchor);
			append_dev(header, input);
			/*input_binding*/ ctx[7](input);
			append_dev(header, t0);
			append_dev(header, label);
			append_dev(label, span0);
			append_dev(header, t1);
			append_dev(header, a0);
			append_dev(a0, picture);
			append_dev(picture, source0);
			append_dev(picture, t2);
			append_dev(picture, source1);
			append_dev(picture, t3);
			append_dev(picture, img);
			append_dev(a0, t4);
			append_dev(a0, span1);
			append_dev(span1, t5);
			append_dev(header, t6);
			append_dev(header, nav);
			append_dev(nav, ul);
			append_dev(ul, li0);
			append_dev(li0, a1);
			append_dev(a1, t7);
			append_dev(ul, t8);
			append_dev(ul, li1);
			append_dev(li1, a2);
			append_dev(a2, t9);
			append_dev(ul, t10);
			append_dev(ul, li2);
			append_dev(li2, a3);
			append_dev(a3, t11);
			/*header_binding*/ ctx[8](header);

			if (!mounted) {
				dispose = listen_dev(input, "click", /*changeNavbar*/ ctx[6], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$content*/ 4 && t5_value !== (t5_value = /*$content*/ ctx[2].orgName + "")) set_data_dev(t5, t5_value);
			if (dirty & /*$content*/ 4 && t7_value !== (t7_value = /*$content*/ ctx[2].manifesto + "")) set_data_dev(t7, t7_value);
			if (dirty & /*$content*/ 4 && t9_value !== (t9_value = /*$content*/ ctx[2].joinUs + "")) set_data_dev(t9, t9_value);
			if (dirty & /*$content*/ 4 && t11_value !== (t11_value = /*$content*/ ctx[2].partners + "")) set_data_dev(t11, t11_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(header);
			/*input_binding*/ ctx[7](null);
			/*header_binding*/ ctx[8](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(61:4) {#if Object.keys($content).length!=0}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let show_if = Object.keys(/*$content*/ ctx[2]).length != 0;
	let if_block_anchor;
	let if_block = show_if && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.c = noop;
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*$content*/ 4) show_if = Object.keys(/*$content*/ ctx[2]).length != 0;

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $content;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('navbar-component', slots, []);
	let hambInput;
	let navbar;
	let localesDropdown;
	let loaded = writable(0);
	let content = writable({});
	validate_store(content, 'content');
	component_subscribe($$self, content, value => $$invalidate(2, $content = value));
	let locale = loadLocaleContent(content, "navbar-component", loaded);

	function changeNavbar() {
		if (hambInput.checked) {
			$$invalidate(1, navbar.style.background = "white", navbar);
		} else {
			setTimeout(
				() => {
					$$invalidate(1, navbar.style.position = "relative", navbar);
					$$invalidate(1, navbar.style.background = "", navbar);
					$$invalidate(1, navbar.style.boxShadow = "", navbar);
				},
				510
			);
		}
	}

	function showLocales() {
		if (localesDropdown.style.display == "block") {
			localesDropdown.style.display = "none";
		} else {
			localesDropdown.style.display = "block";
		}
	}

	function changeLocale(lang) {
		localStorage.setItem("locale", lang);
		let locSplit = location.href.split("/");
		let localesSymbols = Object.keys(locales);
		locSplit = locSplit.filter(x => !localesSymbols.includes(x));
		let loc = locSplit.slice(0, locSplit.length - 1).join("/") + "/" + lang + "/" + locSplit[locSplit.length - 1];
		location.href = loc;
	}

	onMount(() => {
		
	});

	const writable_props = [];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<navbar-component> was created with unknown prop '${key}'`);
	});

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			hambInput = $$value;
			$$invalidate(0, hambInput);
		});
	}

	function header_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			navbar = $$value;
			$$invalidate(1, navbar);
		});
	}

	$$self.$capture_state = () => ({
		onMount,
		getContext,
		writable,
		loadLocaleContent,
		locales,
		hambInput,
		navbar,
		localesDropdown,
		loaded,
		content,
		locale,
		changeNavbar,
		showLocales,
		changeLocale,
		$content
	});

	$$self.$inject_state = $$props => {
		if ('hambInput' in $$props) $$invalidate(0, hambInput = $$props.hambInput);
		if ('navbar' in $$props) $$invalidate(1, navbar = $$props.navbar);
		if ('localesDropdown' in $$props) localesDropdown = $$props.localesDropdown;
		if ('loaded' in $$props) $$invalidate(3, loaded = $$props.loaded);
		if ('content' in $$props) $$invalidate(4, content = $$props.content);
		if ('locale' in $$props) $$invalidate(5, locale = $$props.locale);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		hambInput,
		navbar,
		$content,
		loaded,
		content,
		locale,
		changeNavbar,
		input_binding,
		header_binding
	];
}

class Navbar_component extends SvelteElement {
	constructor(options) {
		super();
		this.shadowRoot.innerHTML = `<style>@import '/css/common.css';#navbar{position:relative;top:0;width:min(100%,116rem);z-index:1000000000;height:5.26rem}#navbar *{font-family:var(--sans-serif, sans-serif)}#logo-container{display:flex;position:absolute;margin-left:1rem;height:100%;max-height:5.26rem;color:black;z-index:1;flex-direction:row;flex-wrap:nowrap;align-items:center}#navbar-logo{height:3.5rem;width:3.5rem;object-fit:contain;border-radius:1rem}#navbar-logo-text{position:relative;width:auto;height:100%;line-height:400%;white-space:nowrap;text-align:center;font-size:1.4rem;color:#292222;font-family:var(--sans-serif, sans-serif);font-weight:400;padding-left:1.2rem}#nav{position:fixed;width:100%;height:100%;background-color:white;overflow:hidden;z-index:0}#menu a{display:block;padding:1.2rem;padding-top:1rem;padding-bottom:1rem;color:black;font-size:1.4rem}#menu a:hover{background-color:rgb(220, 220, 220)}#menu a:active{background-color:#f7aec0}#menu li{list-style-type:none}#nav{max-height:0}#hamb{position:absolute;cursor:pointer;right:0rem;padding:2.8rem 2rem;z-index:9999}#hamb-line{background:black;display:block;height:2px;position:relative;width:24px}#hamb-line::before,#hamb-line::after{background:black;content:'';display:block;height:100%;position:absolute;transition:all .2s ease-out;width:100%}#hamb-line::before{top:5px}#hamb-line::after{top:-5px}#side-menu{display:none}#side-menu:checked~nav{display:block;max-height:100%;padding-top:5.625rem}#side-menu:checked~#logo-container{position:fixed}#side-menu:checked~#hamb{position:fixed}#side-menu:checked~#logo-container{position:fixed}#side-menu:checked~#hamb #hamb-line{background:transparent}#side-menu:checked~#hamb #hamb-line::before{transform:rotate(-45deg);top:0}#side-menu:checked~#hamb #hamb-line::after{transform:rotate(45deg);top:0}@media only screen and (min-width: 1500px){#navbar{position:relative;width:min(95%,116rem);left:50%;transform:translateX(-50%)}#nav{max-height:none;top:0;position:relative;float:right;width:fit-content;background-color:transparent;overflow:visible}#side-menu:checked~nav{padding-top:0}#menu li{float:left}#menu a:hover{background-color:transparent;color:rgb(127, 127, 127)}#menu a{padding:1.2rem;padding-top:1.9rem;padding-bottom:1.9rem}#hamb{display:none}}</style>`;

		init(
			this,
			{
				target: this.shadowRoot,
				props: attribute_to_object(this.attributes),
				customElement: true
			},
			instance,
			create_fragment,
			safe_not_equal,
			{},
			null
		);

		if (options) {
			if (options.target) {
				insert_dev(options.target, this, options.anchor);
			}
		}
	}
}

customElements.define("navbar-component", Navbar_component);

export { Navbar_component as default };
