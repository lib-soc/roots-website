
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteElement, i as init, a as attribute_to_object, b as insert_dev, s as safe_not_equal, d as dispatch_dev, v as validate_slots, o as onMount, n as noop } from './index-b7675d8f.js';
import { w as writable } from './index-674dbc31.js';
import { getData, loadLocaleContent } from '../../../../../../../../../js/libraries/serverTools.js';
import { px2rem } from '../../../../../../../../../js/libraries/miscTools.js';

/* src\manifesto-component.svelte generated by Svelte v3.52.0 */

function create_fragment(ctx) {
	const block = {
		c: function create() {
			this.c = noop;
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('manifesto-component', slots, []);
	let manifesto = [];
	let key;
	let contentButton;
	let contentArrow;
	let contentBlock;
	let buttons = [];
	let headingsObjects = {};
	let contentHeadings = [];
	let contentTable;
	let lastTop = 0;
	let margin = 0;
	let root;
	let main;
	let loaded = writable(0);
	let content = writable({});
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<manifesto-component> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		onMount,
		writable,
		getData,
		px2rem,
		loadLocaleContent,
		manifesto,
		key,
		contentButton,
		contentArrow,
		contentBlock,
		buttons,
		headingsObjects,
		contentHeadings,
		contentTable,
		lastTop,
		margin,
		root,
		main,
		loaded,
		content
	});

	$$self.$inject_state = $$props => {
		if ('manifesto' in $$props) manifesto = $$props.manifesto;
		if ('key' in $$props) key = $$props.key;
		if ('contentButton' in $$props) contentButton = $$props.contentButton;
		if ('contentArrow' in $$props) contentArrow = $$props.contentArrow;
		if ('contentBlock' in $$props) contentBlock = $$props.contentBlock;
		if ('buttons' in $$props) buttons = $$props.buttons;
		if ('headingsObjects' in $$props) headingsObjects = $$props.headingsObjects;
		if ('contentHeadings' in $$props) contentHeadings = $$props.contentHeadings;
		if ('contentTable' in $$props) contentTable = $$props.contentTable;
		if ('lastTop' in $$props) lastTop = $$props.lastTop;
		if ('margin' in $$props) margin = $$props.margin;
		if ('root' in $$props) root = $$props.root;
		if ('main' in $$props) main = $$props.main;
		if ('loaded' in $$props) loaded = $$props.loaded;
		if ('content' in $$props) content = $$props.content;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [];
}

class Manifesto_component extends SvelteElement {
	constructor(options) {
		super();
		this.shadowRoot.innerHTML = `<style>@import '/css/common.css';@media only screen and (max-width: 1210px){}</style>`;

		init(
			this,
			{
				target: this.shadowRoot,
				props: attribute_to_object(this.attributes),
				customElement: true
			},
			instance,
			create_fragment,
			safe_not_equal,
			{},
			null
		);

		if (options) {
			if (options.target) {
				insert_dev(options.target, this, options.anchor);
			}
		}
	}
}

customElements.define("manifesto-component", Manifesto_component);

export { Manifesto_component as default };
